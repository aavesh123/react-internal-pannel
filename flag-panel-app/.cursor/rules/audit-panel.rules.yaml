@audit-panel:
  description: Flag Resolution Panel â€” React + Refine + Ant Design App
  framework: react
  ui_library: antd
  data_library: axios
  routing: refine

  pages:
    - name: AuditPanel
      path: /audit-panel
      layout: true
      components:
        - Filters
        - FlagTable
        - LostModal
        - ExcessModal
        - DamagedModal
        - BatchDiscrepancyModal
        - SkuMismatchModal
        - RejectModal

  inputs:
    - id: filter-flag-type
      label: Flag Type
      type: select
      options: [EXCESS, LOST, DAMAGED, BATCH_DISCREPANCY, SKU_MISMATCH]
      optional: true

    - id: filter-status
      label: Flag Status
      type: select
      options: [PENDING, RESOLVED, REJECTED]
      optional: true

    - id: filter-id
      label: Crate ID / WT ID
      type: text
      optional: true

    - id: filter-date
      label: Date
      type: date
      optional: true

  tasks:
    - id: fetchFlags
      trigger: button[text()='Filter']
      api:
        method: GET
        url: /audit/flags
        query:
          type: $inputs.filter-flag-type
          status: $inputs.filter-status
          crateId: $inputs.filter-id
          timeStart: $inputs.filter-date
      onSuccess: renderFlagsTable

    - id: rejectFlag
      trigger: button[text='Confirm Rejection']
      api:
        method: POST
        url: /audit/flags/reject
        body:
          flagId: $state.currentFlagId
          reason: $inputs.reject-reason
        validate:
          - field: reject-reason
            rule: required
            message: Reason for rejection is required.

    - id: resolveLost
      trigger: button[text*='Lost GON']
      api:
        method: POST
        url: /audit/flags/resolve
        body:
          flagId: $state.currentFlagId

    - id: checkRecoveryGon
      trigger: button[text*='Check for Recovery GON']
      api:
        method: POST
        url: /audit/recovery-gon
        body:
          flag_id: $state.currentFlagId

    - id: resolveExcess
      trigger: button[id='excess-approve-button']
      api:
        method: POST
        url: /audit/flags/resolve
        body:
          flagId: $state.currentFlagId
          quantity: $inputs.modal-qty

    - id: resolveDamaged
      trigger: button[id='damaged-approve-btn']
      api:
        method: POST
        url: /audit/flags/resolve
        body:
          flagId: $state.currentFlagId
          reasons: $inputs.damage-reasons
        validate:
          - rule: sumEquals
            args:
              totalField: damaged-qty-total
            message: Total must match reason breakdown

    - id: resolveBatchDiscrepancy
      trigger: button[text='Submit']
      api:
        method: POST
        url: /audit/flags/resolve
        body:
          flagId: $state.currentFlagId
          batchResolution:
            type: CREATE
            newBatchId: $inputs.batch-id-to-create
            mfgDate: $inputs.new-batch-mfg
            expiryDate: $inputs.new-batch-exp
        validate:
          - fields: [batch-id-to-create, new-batch-mfg, new-batch-exp]
            rule: required
            message: All batch fields must be filled.

    - id: resolveSkuMismatch
      trigger: button[text*='Approve SKU Updation']
      api:
        method: POST
        url: /audit/flags/resolve
        body:
          flagId: $state.currentFlagId
          product_sku: $inputs.actual-sku
          batch_id: $inputs.actual-batch-id
        validate:
          - field: actual-sku
            rule: required
            message: Actual SKU is required.

  views:
    - id: flags-table
      type: table
      target: tbody#flags-table-body
      data: $tasks.fetchFlags.response.data.flags
      columns:
        - label: Flag ID
          value: id
        - label: Type
          value: type
        - label: Identifier
          value: identifier
        - label: SKU
          value: sku
        - label: Details
          value: details
        - label: Date
          value: date
        - label: Status
          value: status
        - label: Actions
          type: buttons
          buttons:
            - label: Resolve
              showIf: status == 'PENDING'
              onClick: openModalForFlag(id)

  modals:
    - id: LostModal
    - id: ExcessModal
    - id: DamagedModal
    - id: BatchDiscrepancyModal
    - id: SkuMismatchModal
    - id: RejectModal

  state:
    - currentFlagId

  validationRules:
    - name: sumEquals
      args:
        totalField: damaged-qty-total
      function: |
        (reasons, args, context) => {
          const total = parseInt(context.inputs[args.totalField]);
          const sum = reasons.reduce((acc, r) => acc + (parseInt(r.quantity) || 0), 0);
          return total === sum;
        }
